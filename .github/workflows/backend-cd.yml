name: Backend Continuous Deployment

on:
  push: #To run on push event to the main brach where there is code change in backend folder.
    branches:
      - main
    paths:
      - 'starter/backend/**' #Trigger only when there is change in backend dirctory.
  workflow_dispatch:  #Allows manual execution
  
  # ECR repository urls are stored as enviroment variables (PROD) along with region and backend url. AWS secrets are also stored in the same PROD env.
jobs:
  lint:
    name: Run Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          cd starter/backend
          pip install pipenv
          pipenv install --dev #Specifically add --dev to install the dev-packages from Pipfile in starter/backend folder.

      - name: Run Linter
        run: |
          cd starter/backend
          pipenv run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          cd starter/backend
          pip install pipenv
          pipenv install #No need to install dev packages as it using user defined tests.

      - name: Run Tests
        run: |
          cd starter/backend
          pipenv run test

  build:
    name: Build and Push Backend Image
    environment: PROD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.BACKEND_ECR_REPOSITORY }}

      - name: Build and Push Docker Image
        run: |
          cd starter/backend
          docker build --tag ${{ vars.BACKEND_ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ vars.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    environment: PROD
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name cluster

      - name: Update Image Tag in Kustomize
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=${{ vars.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          kustomize build | kubectl apply -f -
